<?xml version="1.0"?>
<doc>
    <assembly>
        <name>trifenix.connect</name>
    </assembly>
    <members>
        <member name="T:trifenix.connect.util.ArrayExtension">
            <summary>
            extensión que permite realizar operaciones de añadir y quitar elementos en un array tipado.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.ArrayExtension.Add``1(``0[],``0)">
            <summary>
            añade un elemento a un array y lo regresa con el elemento incluido.
            </summary>
            <typeparam name="T">Tipo del array</typeparam>
            <param name="array">array de elementos al que se añadirá el nuevo elemento</param>
            <param name="element">elemento a añadir al array</param>
            <returns>array de elementos</returns>
        </member>
        <member name="M:trifenix.connect.util.ArrayExtension.Add``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Añade una colección de elementos en un array y retorna el mismo con la colección incluida.
            </summary>
            <typeparam name="T">Tipo del array</typeparam>
            <param name="array">array</param>
            <param name="elements">elementos a añadir en el array.</param>
            <returns>array con la colección incluida</returns>
        </member>
        <member name="M:trifenix.connect.util.ArrayExtension.Remove``1(``0[],System.Int32)">
            <summary>
            remueve un elemento de un array de acuerdo al indice y regresa el nuevo array.
            </summary>
            <typeparam name="T">Tipo</typeparam>
            <param name="array">array</param>
            <param name="indexToRemove">índice del elemento a eliminar.</param>
            <returns></returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm">
            <summary>
            Todos los métodos relacionados con la obtención de metadata y valores desde el modelo de clases y la conversión de esta 
            al modelo de metada de trifenix y viceversa.
            sus subclases son clases estáticas usadas en Reflection.
            </summary>
            <summary>
            Mdm Útil
            </summary>
            <summary>
            mdm
            </summary>
            <summary>
            mdm
            </summary>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Common">
            <summary>
            Operaciones en común para la generación de meatadata
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetTypeModel(System.Reflection.Assembly)">
            <summary>
            Obtiene el listado de tipos que estén en los namespace 
            de entidades (clases) que hereden de documentDb.
            </summary>
            <param name="assembly">Assembly donde buscar el modelo</param>
            <returns>listado de tipos encontrados en los namespaces donde se encuentren entidades que hereden de documentDb</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetTypeInputModel(System.Reflection.Assembly)">
            <summary>
            Obtiene el listado de tipos que estén en los namespace 
            de model-input (clases) que hereden de documentDb.
            </summary>
            <param name="assembly">Assembly donde buscar el modelo</param>
            <returns>listado de tipos encontrados en los namespaces donde se encuentren entidades que hereden de documentDb</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.toLowerFirstLetter(System.String)">
            <summary>
            deja en minuscula la primera letra de un texto
            </summary>
            <param name="source">texto</param>
            <returns>texto con la primera letra con minuscula</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetAllEntitiesWithRelated(System.Type[])">
            <summary>
            Obtiene todas las clases que tengan propiedades con el atributo related
            </summary>
            <param name="types">Todos los tipos del namespace del modelo</param>
            <returns>Tipo de la clase que tiene las propiedades y  el propInfo de cada una que tenga el atributo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetInputTypFromIndex(System.Reflection.Assembly,System.Int32)">
            <summary>
            Obtiene una entidad con un índice
            </summary>
            <param name="asm">asembly</param>
            <param name="index">índice</param>
            <returns>Tipo del índice</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetModelTypeFromIndex(System.Reflection.Assembly,System.Int32)">
            <summary>
            Obtiene el tipo de un modelo de acuerdo a un índice.
            </summary>
            <param name="asm">assembly donde buscar</param>
            <param name="index">índice de la clase</param>
            <returns>Tipo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetInputModelTypeFromIndex(System.Reflection.Assembly,System.Int32)">
            <summary>
            Retorna dos clases desde un índice
            input y model
            </summary>
            <param name="asm">assembly</param>
            <param name="index">índice</param>
            <returns>Tupla con tipo y modelo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetTypeFromIndex(System.Int32,System.Type[])">
            <summary>
            Obtiene un tipo por el índice
            </summary>            
            <param name="index">índice a buscar</param>
            <param name="types">tipos donde buscar</param>
            <returns>Tipo encontrado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetFilterDoc(System.Reflection.Assembly)">
            <summary>
            Obtiene una instancia de la clase que implementa IFilterProcessDescription desde el assembly
            </summary>
            <param name="assembly">assembly</param>
            <returns>clase </returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetDocs(System.Reflection.Assembly)">
            <summary>
            Obtiene una instancia de la clase que implementa IMdmDocumentation desde el assembly
            </summary>
            <param name="assembly">assembly</param>
            <returns>clase </returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Common.GetEnumerations(System.Reflection.Assembly)">
            <summary>
            obtiene todas las enumeraciones de un assembly.
            </summary>
            <param name="assembly">modelo trifenix connect</param>
            <returns>Todas las enumeraciones encontradas</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetMdm(System.Reflection.Assembly,System.String,trifenix.versions.model.VersionStructure)">
            <summary>
            Obtiene la metadata de un modelo
            </summary>
            <param name="assembly">Assembly donde se encuentra el modelo connect</param>
            <param name="version"></param>
            <param name="versionStructure"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetEnumDescriptions(System.Reflection.Assembly)">
            <summary>
            Obtiene las descripciones de enumeraciones encontradas en el modelo.
            </summary>
            <param name="assembly">modelo trifenix connect</param>
            <returns>descripción de enumeraciones</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetEntityWithProcess(System.Reflection.Assembly,trifenix.connect.mdm.ts_model.GlobalFilters,trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.DocFilter[])">
            <summary>
            Asigna los procesos (relaciones de filtro) involucrados en cada entidad.
            Esto permite asignar en la metadata que elementos filtran a otros.
            y que elementos son filtrados por otros.
            </summary>
            <param name="asm">Assembly del modelo</param>
            <param name="gfc">filtros globales del modelo</param>
            <param name="entity">metadata de la entidad</param>
            <param name="docProcess">Documentación de los filtros</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetFilterProcessDocs(System.Reflection.Assembly)">
            <summary>
            Obtiene la documentación de filtros desde el assembly.
            </summary>
            <param name="assembly">assembly del modelo</param>
            <returns>Documentación de filtros</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetMainDocumentation(System.Reflection.Assembly,trifenix.connect.mdm.ts_model.EntityMetadata[])">
            <summary>
            Obtiene la documentación del modelo, desde el listado de entidades de metadata.
            </summary>
            <param name="assembly">Assembly del modelo</param>
            <param name="entitiesFirstStep">metadata de entidades, despues de pasar por el primer paso.</param>
            <returns>Documentación del modelo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetIndexPropertyInfo(trifenix.connect.mdm.resources.IMdmDocumentation,System.Int32[],trifenix.connect.mdm.enums.KindProperty)">
            <summary>
            Obtiene una colección con índice e info (documentación) de una colección de propiedades
            </summary>
            <param name="mdmDocs">implementación de IMdmDocumentation, donde se obtendrá la documentación</param>
            <param name="index">índices de la propiedad</param>
            <param name="kindProp">tipo de propiedad.</param>
            <returns>Tupla con el índice y la información de la propiedad.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetIndexEntityInfo(trifenix.connect.mdm.resources.IMdmDocumentation,System.Int32[])">
            <summary>
            Obtiene una colección con índice e info (documentación) de una colección de propiedades de tipo entidad.
            </summary>
            <param name="mdmDocs">implementación de IMdmDocumentation, donde se obtendrá la documentación</param>
            <param name="index">índices de la propiedad de tipo entidad</param>
            <returns>colección con índice de la entidad y la documentación.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetMainDocumentation(System.Reflection.Assembly,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Obtiene la documentación desde la implementación de la interface IMdmDocumentation
            para obtener la documentación del modelo.
            </summary>
            <param name="assembly">asembly del modelo.</param>
            <param name="indexEntities">índices de propiedad de tipo entidad</param>
            <param name="indexStr">índices de propiedades de tipo string</param>
            <param name="indexDbl">índices de propiedad de tipo double</param>
            <param name="indexDt">índices de propiedad de tipo fecha</param>
            <param name="indexGeo">índices de propiedad de tipo geo</param>
            <param name="indexbl">índices de propiedad de tipo boolean</param>
            <param name="indexNum">índices de propiedad de tipo número</param>
            <param name="indexEnum">índices de propiedad de tipo enumeración</param>
            <returns>documentación del modelo.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetFirstStepEntityCollection(System.Reflection.Assembly,trifenix.connect.mdm.ts_model.GlobalFilters)">
            <summary>
            Obtiene una colección de metadatos para cada entidad.
            </summary>
            <param name="assembly">assembly donde lo obtendrá.</param>
            <param name="globalFilters">filtros globales</param>
            <returns>Colección de metadatos para cada entidad.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetModelInputMetadata(System.Type,System.Type)">
            <summary>
            Retorna las propiedades de un input model
            </summary>
            <param name="input">tipo input</param>
            <param name="mdl">tipo model</param>
            <returns>Colección de inputDetails con la metadata.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetModelMetadata(System.Type,System.Type)">
            <summary>
            Retorna la metadata de las propiedades de una entidad y la metadata de las entidades anidadas, si existen.
            </summary>
            <param name="input">tipo input</param>
            <param name="mdl">tipo model</param>
            <returns>Model Details con las propiedades y su anidación, y un resto de tuplas con las otras propiedades.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetFirstStepEntityMetadata(System.Type,trifenix.connect.mdm.ts_model.GlobalFilters)">
            <summary>
            obtiene principalmente las propiedades tanto de input y output.
            el resto de operaciones se harán es pasos posteriores
            </summary>
            <param name="input">tipo input de entrada</param>
            <param name="globalFilters">para incorporar la propiedad isGlobalFilter</param>
            <returns>Entidad de metadatos</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetIndexesGlobalFilters(trifenix.connect.mdm.ts_model.GlobalFilters)">
            <summary>
            obtiene los indecies de las entidades relacionadas con el globalFilter
            las entidades que tengan el globalFilter serán las que servirán para filtrar el modelo completo.
            </summary>
            <param name="globalFilters">filtro glbobal</param>
            <returns>listado de índices de las entidades que son filtros globales.</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Docs">
            <summary>
            Operaciones relacionadas con procesos
            Donde el atributo ToProcess es usado para saltar de una entidad a otra 
            cada ruta tiene un identificador y un objetivo
            La información originada es usada en la metadata
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetEntityWithDocumentation(trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.MainDocumentation)">
            <summary>
            Asigna la documentación a la entidad, sus propiedades del modelo y sus propiedades de entrada.
            </summary>
            <param name="entity">Entidad a documentar</param>
            <param name="mainDocumentation">Documentación del modelo.</param>
            <returns>Entidad documentada.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetEntityMetadataMainDoc(trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.MainDocumentation)">
            <summary>
            Asigna la documentación de cada entidad en la metadata
            </summary>
            <param name="entity">entidad en la metadata</param>
            <param name="mainDocumentation">documentación del modelo.</param>
            <returns>Entity Metadata</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetModelDetailsDoc(trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.MainDocumentation)">
            <summary>
            Obtiene el detalle del modelo de una entidad, el detalle del modelo se refiere a sus propiedades y sus relaciones.
            </summary>
            <param name="entity">Entida de la emtadata</param>
            <param name="mainDocumentation"></param>
            <returns>Documentación de propiedades y relaciones de una entidad de metadata</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetModelDetailsDoc(trifenix.connect.mdm.ts_model.MainDocumentation,trifenix.connect.mdm.ts_model.ModelDetails)">
            <summary>
            Asigna la documentación al model detail, que viene a ser la metadata de las propiedades.
            </summary>
            <param name="mainDocumentation">documentación principal, donde se encuentra la documentación de cada propiedad.</param>
            <param name="modelDetails"></param>
            <returns>modelo de propiedades documentadas</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetDisplayInfoProp(trifenix.connect.mdm.ts_model.MainDocumentation,trifenix.connect.mdm.enums.KindProperty,System.Int32)">
            <summary>
            Entrega la documentación de acuerdo al tipo de propiedad y su índice.
            </summary>
            <param name="mainDoc">Documentación del modelo.</param>
            <param name="kindProperty">Tipo de propiedad.</param>
            <param name="index">índice de la propiedad.</param>
            <returns>Info con la documentación.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetInputDetailsDoc(trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.MainDocumentation)">
            <summary>
            Obtiene el objeto InputDetails (metadata de ls inputs)
            y le agrega la documentación desde el modelo.
            </summary>
            <param name="entity">metadata de la entidad</param>
            <param name="mainDocumentation">documentación del modelo</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetInputDetailsDoc(trifenix.connect.mdm.ts_model.MainDocumentation,trifenix.connect.mdm.ts_model.InputDetails)">
            <summary>
            Asigna las propieades de documentación al modelo de inputs.
            </summary>
            <param name="mainDocumentation">documentación del modelo.</param>
            <param name="inputDetails">modelo de metadatos para inputs.</param>
            <returns>InputDetails documentado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Docs.GetEntityMetadataDicctionaryDocs(trifenix.connect.mdm.ts_model.EntityMetadata,trifenix.connect.mdm.ts_model.MainDocumentation)">
            <summary>
            Asigna la documentación al diccionario de propiedades.
            </summary>
            <param name="entity">entidad a documentar</param>
            <param name="mainDocumentation">documentación del modelo.</param>
            <returns></returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.EntityAttrPaths">
            <summary>
            Operaciones relacionadas con rutas dentro del modelo
            ToValue y ToProcess hace uso de este en los atributos
            Esta clase incluye operacioes para leer estos atributos y establecer el siguiente salto de acuerdo a la metadata.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.GetPathAttr``1(System.Type)">
            <summary>
            Obtiene el atributo de Ruta (ToValue, ToProcess).
            validar!
            </summary>
            <param name="type">tipo a determinar si es ToValue</param>
            <returns>ToValue si el tipo lo implmenta</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.ToPathFirstStep``2(System.Type[],System.ValueTuple{System.Type,``1}[],System.Func{System.ValueTuple{System.Type,``1},``0},System.Func{System.ValueTuple{System.Type,``1}[],System.ValueTuple{System.Type,``1}},System.Func{System.Type[],``1,System.ValueTuple{System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm_attributes.EntityIndexRelatedPropertyAttribute}})">
            <summary>
            Usa ToProcessClass o ToValue
            para generar el contenedor (ToProcess o ToValue) con el primer registro                   
            </summary>
            <param name="types">tipos en el modelo de datos</param>
            <param name="tup">colección de tuplas con el tipo y el atributo para llegar a un valor</param>
            <param name="convert">Convierte una tupla de type y ToGlobalFilterValue del primer salto (origen) a el tipo contenedor (ToProcess o ToValue)</param>
            <returns>el contenedor creando la primera estructura y el resto de tuplas con el tipo y el atributo ToGlobalFilterValue</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:trifenix.connect.util.Mdm.EntityAttrPaths.GetPathFilterValue``1(System.Type[],System.Type,System.Type,System.ValueTuple{System.Type,``0}[])" -->
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.GetCloseEntities(System.Type[],System.Type)">
            <summary>
            Obtiene un listado de entidades (tipo) y los datos que se aplicaron en la metadata de la propiedade que se apunta.
            Ejemplo, Season no tiene el id de barrack, pero barrack si tiene el id de Season
            en el modelo se usa un atributo que vincula season con Barrack
            </summary>
            <param name="types">Donde buscará las entidades</param>
            <param name="source">Tipo del que se buscará otras propiedades de otras entidades que aputan a el</param>
            <returns>entidades que apuntan a la fuente</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.GetCloses(System.ValueTuple{System.Type,System.Reflection.PropertyInfo[]}[],System.Type)">
            <summary>
            obtiene una colección con el tipo del elemento o entidad más cercanos y el atributo que apunta al origen
            </summary>
            <param name="tup">colección de tuplas con tipos que tienen propiedades que implmeneten el atributo related</param>
            <param name="typeSource">tipo fuente, del que obtendremos los hermanos</param>
            <returns>el listado de tipos aledaños y el atributo que apunta al origen</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.GetPathFilterValue(System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Crea un PathFilterValue (un salto), 
            con el tipo de origien
            el tipo del salto
            y la metadata de la propiedad que los une.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <param name="propInfo"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.EntityAttrPaths.GetNextTarget(System.Type[],System.Type,System.Type)">
            <summary>
            Obtiene el nombre de la propiedad en la entidad destino que apunta a la entidad fuente.
            </summary>
            <param name="types">donde buscar los tipos aledaños</param>
            <param name="source">tipo que necesita el nombre de la propiedad</param>
            <param name="target">Termino de la ruta</param>
            <returns>Nombre de la propiedad</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.GlobalFilter">
            <summary>
            Operaciones de GlobalFilter
            Esto incluye ToValue, dado que es exclusivo del filtro global.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetGlobalFilter(System.Reflection.Assembly)">
            <summary>
            Obtiene el filtro global
            </summary>
            <param name="assembly">asembly donde obtener la metadata</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetToValues(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute}[])">
            <summary>
            obtiene una colección con tuplas con el tipo y los datos del atributo ToGlobalFilterValue
            este último permite saltar a otra entidad para obtener su identificador.
            Como es el caso de CostCenter para llegar a Season.
            </summary>
            <param name="atrs">colección de tuplas con el tipo y el atríbuto ToValue</param>
            <returns>Colección de atributos to Value por origen y destino</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetToValue(System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute})">
            <summary>
            Convierte el tipo y el atributo ToValue de la primera ruta, en el objeto ToValue
            </summary>
            <param name="atr"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetToValues(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute}[],System.Func{System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute}[],trifenix.connect.mdm.ts_model.ToValue})">
            <summary>
            obtiene una colección con tuplas con el tipo y los datos del atributo ToGlobalFilterValue
            este último permite saltar a otra entidad para obtener su identificador.
            Como es el caso de CostCenter para llegar a Season.
            </summary>
            <param name="atrs">colección de tuplas con el tipo y el atríbuto ToValue</param>
            <param name="toValue">método para convertir una colección de tipos y su atributo a ToValue</param>
            <returns>Colección de atributos to Value por origen y destino</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.ToValueFirstStep(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute}[])">
            <summary>
            Toma de una colección de tuplas, identifica la primera
            forma ToValue, asigna la primera ruta y retorna el resto de rutas.
            </summary>
            <param name="types">tipos donde buscará los vecinos</param>
            <param name="tup"></param>
            <returns>tupla con el tipo y el ToValue</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.ToValueTypes(System.Type[])">
            <summary>
            Retorna una colección con el tipo y el atributo ToGlobalFilterValueAttribute encontrado
            </summary>
            <param name="types">colección de tipos a analizar</param>
            <returns>colección con tuplas del tipo encontrado y el objeto ToGlobalFilterValueAttribute</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetToValue(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToGlobalFilterValueAttribute}[])">
            <summary>
            toma una tupla con el tipo y los valores del atributo toValue
            para retornar un ToValue de metadata
            </summary>
            <param name="types"></param>
            <param name="tup">tuple con el tipo y el atributo</param>
            <returns>desde el atributo a la metadata</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.OnlyFilters(System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToProcessAttribute}[])">
            <summary>
            Los filtros globales serán solo los que apuntan a barrack, lo que apunte a barrack será de filtro global, pero no parte del filtro global de cabecera.
            para determinarlo, 
            1. si existen dos procesos, que como final tienen uno en común, solo esos serán considerados.
            2. si un target type coincide con starttype.
            </summary>            
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.TargetFilterType(System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToProcessAttribute}[])">
            <summary>
            Obtiene el objetivo de un filtro global.
            </summary>
            <param name="tups">tuplas con tipos y atributo ToProcess</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GlobalFilter.GetGlobalFilterValue(System.Type)">
            <summary>
            Obtiene el atributo de ToValue para un tipo
            </summary>
            <param name="type">tipo a determinar si es ToValue</param>
            <returns>ToValue si el tipo lo implmenta</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.MetaProps">
            <summary>
            Operaciones de metadata en propiedades
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            obtiene la metadata de una propiedad desde una clase de entrada
            el objetivo es unir la propiedad de input a una en el modelo o viceversa
            De esta manera, más los atributos, podrá generar la metadata necesaria para operar con la propiedad.
            </summary>
            <param name="input">clase input</param>
            <param name="output">clase output</param>
            <param name="propertyInput">propiedad del input</param>
            <param name="info">documentacion de la propiedad</param>
            <returns>Metadata de una propiedad y el target encontrado (esto es util para RelatedProperty)</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetRelatedMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            Obtiene la metadata de una propiedad tipo entidad 
            </summary>
            <param name="input">clase de entrada, puede ser un input o un model</param>
            <param name="output">clase de salida, puede ser un input o un model</param>
            <param name="propertyInput">propiedad perteneciente a la clase input</param>
            <param name="info">documentación de la propiedad</param>
            <returns>Metadata de la propiedad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetEnumPropMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            Complementa una metadata con los datos de la propiedad entidad.
            </summary>
            <param name="input">clase de entrada, puede ser un input o un model</param>
            <param name="output">clase de salida, puede ser un input o un model</param>
            <param name="propertyInput">propiedad perteneciente a la clase input</param>
            <param name="info"></param>
            <returns>Metadata de una propiedad de entidad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            Retorna metadata de propiedad input
            </summary>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">propiedad del input</param>
            <param name="info">documentación de la propiedad</param>
            <returns>Metadata de una propiedad input</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputRelatedMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            Obtiene la metadata de una propiedad de entidad de input
            </summary>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">propiedad del input</param>
            <param name="info">documentación de la propiedad</param>
            <returns>Metadata de una propiedad input de tipo entidad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputRelatedMetadata(trifenix.connect.mdm.ts_model.RelatedPropertyMetadata,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Obtiene la metadata de una propiedad de entidad de input
            </summary>
            <param name="propMeta">metadata de entidad</param>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">propiedad del input</param>
            <returns>Metadata de una propiedad entidad en input</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputEnumMetadata(System.Type,System.Type,System.Reflection.PropertyInfo,trifenix.connect.mdm.ts_model.EntitySearchDisplayInfo)">
            <summary>
            Obtiene metadata de propiedad input de tipo enumeración.
            </summary>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">propiedad del input</param>
            <param name="info">documentación de la propiedad</param>
            <returns>metadata de una enumeración input</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputEnumMetadata(trifenix.connect.mdm.ts_model.PropertyMetadadataEnum,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Retorna una propiedad de enums para input desde una base
            </summary>
            <param name="propMeta">Metadata de enum</param>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">propiedad del input</param>
            <returns>metadata de enum de input</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropInputMetadata(trifenix.connect.mdm.ts_model.PropertyMetadata,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Obtiene inputPropDetails desde un propertyMetadata
            </summary>
            <param name="propMeta">metadadata de propiedad como base</param>
            <param name="input">tipo input</param>
            <param name="model">tipo model</param>
            <param name="propertyInput">info de propiedad del input</param>
            <returns>Detalles del input</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetEnumPropMetadata(trifenix.connect.mdm.ts_model.PropertyMetadata,System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Complementa una metadata con los datos de la propiedad entidad.
            </summary>
            <param name="propMeta">metadata de la propiedad base</param>
            <param name="input">clase de entrada, puede ser un input o un model</param>
            <param name="output">clase de salida, puede ser un input o un model</param>
            <param name="propertyInput">propiedad perteneciente a la clase input</param>
            <returns>Metadata de una propiedad de entidad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetRelatedMetadata(System.ValueTuple{trifenix.connect.mdm.ts_model.PropertyMetadata,trifenix.connect.mdm_attributes.BaseIndexAttribute},System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Complementa una metadata con los datos de la propiedad entidad.
            </summary>
            <param name="prop">metadata de la propiedad base y el atributo del target (si no encuentra a donde apunta el índice de la propidad, podrá usar este, que fue sacado de la misma clase a la que pertenece la propiedad.)</param>
            <param name="input">clase de entrada, puede ser un input o un model</param>
            <param name="output">clase de salida, puede ser un input o un model</param>
            <param name="propertyInput">propiedad perteneciente a la clase input</param>
            <returns>Metadata de una propiedad de entidad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.IsAutoNumeric(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Retorna si una propiedad es autonumérica.
            </summary>
            <param name="type">Tipo de la clase</param>
            <param name="propInfo">la propiedad a evaluar</param>
            <returns>true si es autonumerico</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropOutput(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Toma una clase del que se quiere obtener una propiedad
            que sea igual a la propiedad que se esta ingresando.
            una propiedad es igual a otra, de otra clase
            si está unida por el mismo nombre
            o por los atributos mdm.
            </summary>
            <param name="input">tipo donde buscaremos la propiedad</param>
            <param name="propertyOutput">propiedad a buscar en la clase</param>
            <returns>Info de propiedad si encuentra el valor</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.GetPropEqual(System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Reflection.PropertyInfo}})">
            <summary>
            Retorna información de una propiedad de un modelo, desde una propiedad input.
            </summary>
            <param name="propertyInput">propiedad input</param>
            <param name="types">colección de tipos donde buscar</param>
            <returns>propiedad del modelo</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection">
            <summary>
            mdm reflections
            </summary>
            <summary>
            Colección de métodos destinados a obtener metadata desde las clases utilizando el modelo de atributos del metadata model de trifenix.
            </summary>
            <summary>
            reflection
            </summary>
            <summary>
            reflection
            </summary>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection.Attributes">
            <summary>
            Métodos estáticos útiles para el modelo de atributos del
            /// Metadata-Model de trifenix.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetAttributes``1(System.Type)">
            <summary>
            Obtiene un array de atributos del tipo que se le indique 
            </summary>
            <typeparam name="T">Tipo de atributo</typeparam>
            <param name="type">tipo de dato en el que se buscará la propiedad.</param>
            <returns>Colección de atributos solicitados</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Obtiene un Atributo de una propiedad
            </summary>
            <typeparam name="T">Tipo de atributo a obtener</typeparam>
            <param name="propInfo">metadata de la propiedad</param>
            <returns>atributo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetPropertiesByAttribute(System.Object)">
            <summary>
            obtiene un diccionario con propiedades que deben ser mapeadas al metadata model de trifenix.
            Los elementos que son mapeados son agrupados con la propiedad que tiene la metadata 
            y el valor que tiene esa propiedad en el objeto de entrada
            </summary>
            <param name="Obj">objeto que se le extraerá la metadata y sus valores</param>
            <returns>diccionario que por cada propiedad de la clase que implemente el metadata model de trifenix, tendrá la metadata y su valor</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetPropertiesByAttributeWithValue(System.Object)">
            <summary>
            Obtiene desde un objeto, solo las propiedades y su valor que no sean nulos o en el caso de las colecciones no estén vacias.
            </summary>
            <param name="Obj">objeto que se le extraerá la metadata y sus valores</param>
            <returns>diccionario que por cada propiedad de la clase que implemente el metadata model de trifenix, tendrá la metadata y su valor</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetPropertiesWithoutAttribute(System.Object)">
            <summary>
            Obtiene una colección de objetos de cada propiedad de ub objeto de una clase  que no tengan el atributo que origina la metadata,
            en el modelo puede suceder que una propiedad no asigne el atributo, pero el tipo de dato de la propiedad
            puede tener estos atributos.
            esto aplica para para referencias locales, que son aquellas  referencias a clases que no tienen un identificador en una base documental y que el mdm si lo considera (lo considera para todas las entidades).
            </summary>
            <param name="Obj">objeto donde se obtendrá la colección de valores que no tienen atributos de metadata.</param>
            <returns>colección de objetos de propiedades que no tienen asignados atributos de metadata</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetPropertiesWithoutAttributeWithValues(System.Object)">
            <summary>
            Obtiene una colección de objetos correspondiente a cada propiedad de una clase que no tengo asigando un atributo mdm y que no sea nulo o una colección vacia.
            </summary>
            <param name="Obj">objeto del que se obtendrán los valores</param>
            <returns>colección de objetos  correspondiente a cada propiedad de una clase que no tengo asigando un atributo mdm y que no sea nulo o una colección vacia.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetAttributeList``1(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Obtiene todos las propiedades de un tipo,
            esta revisa los objetos interiores
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetAttributesCollection(System.Type)">
            <summary>
            Recorre una clase y retorna todas sus propiedades y los atributos que esta contenga.
            </summary>
            <param name="type">Tipo de la clase</param>                
            <returns>Colección con la clase, la info de la propiedad y los atributos que esta contenga.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Attributes.GetAttributeList``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.Reflection.PropertyInfo,System.Attribute[]}})">
            <summary>
            Retorna una colección con clase e info de una propiedad desde una lista de clases, info de propiedad y atributos
            De acuerdo al tipo de atributo que se le indique.
            </summary>
            <typeparam name="T">Tipo de atributo a buscar</typeparam>
            <param name="props">tupla con clase, info propiedad y atributos que esta contenga</param>
            <returns>Las clases e info de propiedad de un atributo</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection.Collections">
            <summary>
            Operaciones reflection para colecciones.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CastToGenericArray(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convierte una lista de objetos a un array tipado (T[]) de manera dinámica,
            asignandole el tipo y la lista de objetos a castear.
            </summary>
            <param name="genericParameterType">Tipo al que se convertirá</param>
            <param name="list">listado de objetos a convertir.</param>
            <returns>objeto que puede ser casteado a un array tipado (T[])</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CastToArray``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convierte un listado de objetos a un array tipado.
            </summary>
            <typeparam name="T">el tipo a convertir</typeparam>
            <param name="list">lista de objetos a convertir</param>
            <returns>array tipado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CastToGenericList(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convierte una lista de objetos a una colección con generic List(T) de manera dinámica,
            asignandole el tipo y la lista de objetos a castear.
            </summary>
            <param name="genericParameterType">Tipo al que se convertirá</param>
            <param name="list">listado de objetos a convertir.</param>
            <returns>objeto que puede ser casteado a una lista tipada (List(T))</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CastToList``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convierte un listado de objetos a una lista tipada (List(T))
            </summary>
            <typeparam name="T">tipo</typeparam>
            <param name="list">listado de obejtos</param>
            <returns>lista tipada</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CreateInstance``1">
            <summary>
            Crea una instancia de una clase dinámicamente
            </summary>
            <typeparam name="T">Tipo de la instancia de objeto a crear</typeparam>
            <returns>nueva instancia de un objeto del tipo indicado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.CreateEntityInstance(System.Type)">
            <summary>
            Crea una instancia tipada, indicandole el tipo, esta puede se puede convertir en el tipo indicado dinámicamente.
            </summary>
            <param name="genericParameterType">Tipo de la nueva instancia</param>
            <returns>nueva instancia de un objeto del tipo indicado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.FormatValues(System.Reflection.PropertyInfo,System.Collections.Generic.List{System.Object})">
            <summary>
            Retorna un valor o colección tipada, de acuerdo a la metadata de la propiedad
            si la propiedad no es una colección, retornará el primer valor de la lista.
            si es una colección la casteará a un array o lista del tipo de dato que indica la metadata de la propiedad.
            </summary>
            <param name="prop">metadata de la propiedad</param>
            <param name="values">valor a convertir al tipo que indica la metadata</param>
            <returns>valor casteado al tipo que indica la metadata.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.DeleteElementInCollection``1(System.String,``0[])">
            <summary>
            Elimina un elemento de una colección
            si este no existe lanzará excepción.
            si existe lo eliminará
            retornará la lista con el resultado
            </summary>
            <typeparam name="T">elemento de una base de datos</typeparam>
            <param name="itemId">id del elemento a eliminar</param>
            <param name="prev">lista donde se hará la operación</param>
            <returns>lista con el elemento eliminado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.UpsertToCollection``1(``0,``0[])">
            <summary>
            Añade un elemento a una colección si el elemento no existe,
            elimina y añade un elemento a una colección, si el elemento ya existe
            esto determinado por DocumentDb y su id.
            </summary>
            <typeparam name="T">Elemento de base de datos</typeparam>
            <param name="item">item a actualizar o añadir</param>
            <param name="prev">lista donde realizará la operación</param>
            <returns>lista de nuevos elementos para reemplazar a prev</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.GetId(System.Object)">
            <summary>
            obtiene el valor de la propiedad id
            </summary>
            <param name="elementWithId"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Collections.GetProp(System.Object,System.String)">
            <summary>
            obtiene el valor de la propiedad de acuerdo al nombre de la propiedad indicado en el argumento.
            </summary>
            <param name="element"></param>
            <param name="propName"></param>            
            <returns></returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection.Cripto">
            <summary>
            Operaciones reflection para criptografia.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Cripto.ComputeSha256Hash(System.String)">
            <summary>
            Crea un hash a partir de un string
            </summary>
            <param name="rawData">string que debe ser hasheado</param>
            <returns>hash</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.IsPrimitive(System.Type)">
            <summary>
            Determina si un tipo es primitivo.
            </summary>
            <param name="t">Tipo a evaluar</param>
            <returns>true si es primitivo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.IsPrimitiveAndCollection(System.Type)">
            <summary>
            Determina si el tipo es primitivo o es una colección de prmitivos.
            </summary>
            <param name="t">tipo a evaluar</param>
            <returns>true, si es un tipo primitivo o una colección de primitivos</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.IsPrimitiveCollection(System.Type)">
            <summary>
            Determina si un tipo es una colección primitiva
            </summary>
            <param name="t">tipo a evaluar</param>
            <returns>true, si es una colección primitiva</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.InvokeDynamicGeneric(System.String,System.Type,System.Object[],System.Type)">
            <summary>
            Invoca método genérico dinámicamente (Los tipo de datos se determinan en tiempo de ejecución).
            </summary>
            <param name="MethodName">Nombre del método genérico</param>
            <param name="GenericType">Tipo de dato usado como genérico</param>            
            <param name="Parameters">Conjunto de parámetros utilizados por el método genérico</param>
            <param name="genericProp"></param>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.InvokeDynamicGeneric(System.Type,System.String,System.Type,System.Object[],System.Type)">
            <summary>
            Invoca método genérico dinámicamente (Los tipo de datos se determinan en tiempo de ejecución).
            </summary>
            <param name="whereToMethod">donde se encuentra el método</param>
            <param name="MethodName">Nombre del método genérico</param>
            <param name="GenericType">Tipo de dato usado como genérico</param>            
            <param name="Parameters">Conjunto de parámetros utilizados por el método genérico</param>
            <param name="genericProp"></param>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.GetDescription(System.Enum)">
            <summary>
            Entrega la descripción de un item de una enumeración.  
            </summary>
            <param name="GenericEnum">elemento de una enumeración</param>
            <returns>Texto en al atributo descripción</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.GetDescription(System.Type)">
            <summary>
            A partir de una enumeración entrega un diccionario con el indice y
            la descripción, esta es obtenida desde el atributo description que lleva cada elemento de la enumeración.
            si no tiene el atributo simplemente convertirá a string el elemento.
            </summary>
            <param name="type">Enumeración</param>
            <returns>Diccionario con el índice y la descripción</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.HasValue(System.Object)">
            <summary>
            verifica que un elemento no sea nulo y si es una lista, no esté vacia.
            </summary>
            <param name="value">objeto a evaluar</param>
            <returns>true, si es un valor y no es nulo o es una colección con al menos un valor.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.IsEnumerable(System.Object)">
            <summary>
            Verifica si un objeto es una colección (implementa IEnumerable).
            </summary>
            <param name="element">objeto a comprobar</param>
            <returns>true si es una colección.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.IsEnumerableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Comprueba si una propiedad de una clase es una enumeración.
            </summary>
            <param name="propertyInfo">metadata de la propiedad</param>
            <returns>true si la propiedad es una colección.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types that can be loaded from an assembly.
            Source: http://stackoverflow.com/questions/11915389/assembly-gettypes-throwing-an-exception
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.NotNull(System.Object,System.String)">
            <summary>
            Envía excepción si el assembly es nulo.
            </summary>
            <param name="obj">assembly</param>
            <param name="argumentName">un argumento importante de mencionar en la excepción.</param>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.CreateDynamicList(System.Object)">
            <summary>
            Convierte un objeto individual o colección, en una colección
            </summary>
            <param name="Obj">bjeto a convertir</param>
            <returns>si el objeto es una colección deveulve una colección, si no una colección con un solo valor</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection.Entities">
            <summary>
            Métodos relacionados con Entidades
            </summary>
            <summary>
            Métodos relacionados con entidades.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetEntityType(System.Int32,System.Type,System.String)">
            <summary>
            obtiene el tipo de la clase de acuerdo al índice
            el índice identifica un entitySearch.
            por ejemplo, un entitySearch con indice 1  sería igual  a la clase Persona,
            este vínculo se logra a través de un atributo indicado en la clase (Metadata).
            este método busca en el assembly  y el namespace indicado, la clase que tenga el atributo BaseIndexAttribute,
            y dentro de ese atributo tenga el índice indicado.
            </summary>
            <see cref="T:trifenix.connect.mdm_attributes.BaseIndexAttribute"/>
            <param name="index">índice de una entidad del metadata model de trifenix.</param>
            <param name="typeOfAssembly">Cualquier tipo que esté contenido en el mismo assembly en el que esta la clase que tiene el atributo que indica que es una entidad</param>
            <param name="nms">namespace donde se encuentra la clase que corresponde a la entidad</param>
            <returns>la clase que tiene el atributo BaseIndexAttribute y el índice indicado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetEntityType(System.Int32,System.Reflection.Assembly,System.String)">
            <summary>
            obtiene el tipo de la clase de acuerdo al índice
            el índice identifica un entitySearch.
            por ejemplo, un entitySearch con indice 1  sería igual  a la clase Persona,
            este vínculo se logra a través de un atributo indicado en la clase (Metadata).
            este método busca en el assembly  y el namespace indicado, la clase que tenga el atributo BaseIndexAttribute,
            y dentro de ese atributo tenga el índice indicado.
            </summary>                
            <param name="index">índice de una entidad del metadata model de trifenix.</param>
            <param name="assembly">assembly en el que esta la clase que tiene el atributo que indica que es una entidad</param>
            <param name="nms">namespace donde se encuentra la clase que corresponde a la entidad</param>
            <returns>la clase que tiene el atributo BaseIndexAttribute y el índice indicado</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetEntityFromSearch``1(trifenix.connect.mdm.entity_model.IEntitySearch{``0},System.Type,System.String,System.Func{``0,System.Object},trifenix.connect.search_mdl.ISearchEntity{``0},trifenix.connect.interfaces.hash.IHashSearchHelper)">
            <summary>
            Retorna un objeto desde un entitySearch, el tipo del objeto de retorno será del tipo que utilice el atributo EntityIndexAttribute .
            para esto buscará todas las clases que tnengan el atributo EntityIndexAttribute que vincula la clase con el índice
            del entitySearch, una vez encontrada hará lo mismo con los atributos de cada propiedad para finalmente crear un objeto tipado con todos los valores del entitySearch.
            </summary>
            <typeparam name="T">Las entidades tienen un tipo de dato geo, que depende de la base de datos a usar.</typeparam>        
            <param name="entitySearch">entitySearch a convertir</param>
            <param name="anyElementInAssembly">assembly donde buscar la clase que sea del tipo de la entidad</param>
            <param name="nms">namespace donde se encuentra la clase que sea del tipo de entidad</param>
            <param name="geoConvert"></param>
            <param name="sEntity"></param>
            <param name="hash"></param>
            <returns>objeto de una clase que representa una entidad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetSimpleEntity``1(trifenix.connect.search_mdl.Implements{``0},System.Object,System.Int32,trifenix.connect.interfaces.hash.IHashSearchHelper)">
            <summary>
            obtiene una nueva entidad con sus propiedaes, sin asignar el id y sin referencias locales.
            </summary>
            <typeparam name="T">Tipo de dato de la propiedad geo de una entidad</typeparam>
            <see cref="T:trifenix.connect.search_mdl.Implements`1"/>
            <param name="implements">objeto que mantiene todos los tipos a los que cada propiedad debe ser convertido</param>
            <param name="obj">objeto desde el que se obtendrán los atributos</param>        
            <param name="index">índice de la entidad a crear, el índice se encuentra en el atributo mdm de la clase</param>
            <returns>retorna un nuevo entitySearch desde un objeto, instancia de una clase.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetValues``1(trifenix.connect.mdm.entity_model.IEntitySearch{``0},System.Boolean,System.Int32,System.Int32,System.Func{``0,System.Object},trifenix.connect.interfaces.hash.IHashSearchHelper,trifenix.connect.search_mdl.ISearchEntity{``0},System.Type,System.String)">
            <summary>
            Retorna el valor de una propiedad de un objeto, desde un entitySearch indicando cual es la propiedad.
            </summary>
            <see cref="T:trifenix.connect.mdm.enums.KindProperty">Tipo de propiedad de valor</see>
            <see cref="T:trifenix.connect.mdm.enums.KindEntityProperty">Tipo de propiedad de referencia</see>
            <typeparam name="T">Tipo de valor a entregar</typeparam>
            <param name="entitySearch">Entidad a convertir</param>
            <param name="isEntity">Determina si la propiedad que se desea obtener es de tipo entidad o es una propiedad primitiva (DateTime, número, etc.)</param>
            <param name="typeRelated">identificador del tipo de valor a obtener, para el caso de las propiedades sería KindProperty y para entidades KindEntityProperty</param>
            <param name="indexProperty">índice de la propiedad</param>
            <param name="geoConvert">convierte el tipo geo del entitySearch a el objeto de la instancia de la clase a obtener</param>
            <param name="hash"></param>
            <param name="anyElementInAssembly">Tipo de un objeto que se encuentre en el assembly donde está la clase con la metadata</param>
            <param name="nms">namespace donde se encuentra la clase con la metadata</param>
            <param name="sEntity">Interface para obtener un entitySearch desde una clase local</param>
            <returns>valor de una propiedad</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetEntityBaseSearch``1(System.Object)">
            <summary>
            Obtiene un entitySearch desde un objeto, asignando las propiedades que corresponden, si el objeto no implementa las propiedades de IEntitySearch lanzará error, 
            
            </summary>
            <typeparam name="T">Tipo de dato Geo, dependerá de la implementación</typeparam>
            <param name="entity">objeto a convertir</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetIndex(System.Type)">
            <summary>
            obitene el índice de un tipo.
            </summary>
            <param name="type">tipo de una propiedad</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetEntitySearch``1(trifenix.connect.search_mdl.Implements{``0},System.Object,trifenix.connect.interfaces.hash.IHashSearchHelper,System.Collections.Generic.List{trifenix.connect.mdm.entity_model.IEntitySearch{``0}},trifenix.connect.mdm.entity_model.IEntitySearch{``0})">
            <summary>
            Obtiene una colección de EntitySearch desde un objeto
            </summary>
            <typeparam name="T">Tipo del dato geo que tiene la entidad</typeparam>
            <param name="implements">retorna los tipos de datos para los elementos de un entity</param>
            <param name="obj">objeto a convertir</param>
            <param name="hash">clase que permite convertir un objeto en un hash y también convertir la cabecera de un entitySearch</param>
            <param name="collection">usado como recursivo, para obtener los entitySearch internos </param>
            <param name="parent">EntitySearch padre, usado para la recursividad</param>
            <returns>Colección de entitySearch que representan un model</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.GetDeleteItem``1">
            <summary>
            Retorna una colección de entidades y nombres de propiedad afectados por la eliminación de un elemento.
            por ejemplo.
            Si queremos borrar barrack,
            Retornaría las entidades Pre-orden, Orden y Ejecución, con la propiedad que apunta a barrack.
            </summary>
            <typeparam name="T">Tipo de elemento a desactivar/eliminar</typeparam>
            <returns>Entidades y propiedades afectadas por la eliminación de la entidad.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.PreLoadedDictionary(System.Type)">
            <summary>
            Retorna todos los índices de cada una de las colecciones de propiedades para un entitySearch
            de un tipo de dato, generalmente un objeto de base de datos.
            si no encuentra atributos del modelo de metadatos, devolverá nulo.
            </summary>
            <returns>índices agrupados por colección (como entitySearch) de una clase</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Reflection.Entities.Props">
            <summary>
            Métodos relacionados con propiedades de entidades.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetPropValues``1(trifenix.connect.mdm.entity_model.IProperty{``0}[],System.Int32)">
            <summary>
            retorna los valores desde una colección de propiedades.
            </summary>
            <typeparam name="T">Tipo de valor de la propiedad</typeparam>
            <param name="props">propiedades que serán usadas para retornar los valores</param>
            <param name="index">índice de la propiedad</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.CheckImplementsIProperty(System.Type)">
            <summary>
            Verifica si un tipo es una propiedad (IProperty())
            </summary>
            <see cref="T:trifenix.connect.mdm.entity_model.IProperty`1"/>
            <param name="typeToCheck">tipo a verificar</param>
            <returns>true, si implementa IProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.CheckImplementsIRelatedId(System.Type)">
            <summary>
            Verifica si un tipo es una propiedad de tipo entidad (IRelatedId)
            </summary>
            <see cref="T:trifenix.connect.mdm.entity_model.IRelatedId"/>
            <param name="typeToCheck">tipo a verificar</param>
            <returns>true, si implementa IRelatedId</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetProperty``1(System.Int32,System.Object,System.Type,System.Func{System.Object,``0})" -->
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetEntityProperty(System.Int32,System.Object,System.Type)">
            <summary>
            Un EntitySearch se compone de propiedades que relacionan otros EntitySearch
            estas propiedades tienen el índice que identifica el tipo de entidad (Persona, Producto o cualquier tipo de agrupación) y el id que identifica un elemento dentro de una base de datos.
            este método crea una propiedad de este tipo
            </summary>
            <param name="index">índice del tipo de entidad</param>
            <param name="value">identificador de la entidad</param>
            <param name="typeToCast">Tipo al que debe ser convertido (debe implementar IRelatedId)</param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetArrayOfElements``1(System.Collections.Generic.KeyValuePair{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object},System.Type,System.Func{System.Object,``0})">
            <summary>
            Obtiene un array de propiedades de acuerdo al índice y tipo de dato que tenga la metadata del atributo
            </summary>
            <typeparam name="T">Tipo de valor de la propiedad que será retornada</typeparam>
            <param name="attribute">tupla con el atributo de la propiedad y el valor de la instancia</param>
            <param name="typeToCast">Tipo de dato a convertir</param>
            <returns>Array de propiedades de acuerdo al índice y tipo de dato que tenga la metadata del atributo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetPropertiesObjects``2(trifenix.connect.mdm.enums.KindProperty,System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object},System.Func{System.Object,``0})">
            <summary>
            Obtiene todas las propiedades del tipo que se le indique para un objeto
            estos tipos son de valor (str,num32, enum, geo, etc.)
            Desde esta se especializan otro métodos
            las propiedades conformar un entitySearch, base del modelo MDM.
            </summary>
            <typeparam name="T">Tipo de valor la propiedad</typeparam>
            <param name="related">Tipo de propiedad</param>
            <param name="elements">metadata y datos de un objeto</param>
            <param name="castGeoToSearch">Función para convertir el elemento geo de la clase a la de la entidad de busqueda</param>
            <returns>listado de propiedades de un tipo</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetReferences(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object},System.Type)">
            <summary>
            Obtiene referencias de una entidad (no locales), desde el listado de metadata y valores de un objeto.
            si encuentra atributos de tipo related, ontendrá el índice y el valor para formar una propiedad de tipo IRelatedId
            </summary>
            <param name="elements">Diccionario con la metadata y valor de la propiedad</param>
            <param name="typeToCast">Tipo a convertir que implemente IRelatedId</param>
            <returns>array de clase indicada que implementa IRelatdId</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetNumProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo double encontradas en un objeto
            Obtiene las propiedades de tipo entero 
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>array de clase indicada que implementa INum32Property</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetDblProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo double encontradas en un objeto
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>array de clase indicada que implementa IDblProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetDtProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo fecha encontradas en un objeto
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>array de clase indicada que implementa IDtProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetEnumProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo enum encontradas en un objeto.
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>array de clase indicada que implementa IEnumProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetBoolProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo entero
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>array de clase indicada que implementa IBoolProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetGeoProps``2(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object},System.Func{System.Object,``0})">
            <summary>
            Obtiene las propiedades de tipo geo base de un entitySearch encontradas en un objeto.
            el caso de geo, depende de la base de datos, ya que cada db puede tener un formato distinto para el tipo geo.
            por eso, este método incorpora un método de entrada, para convertir un tipo geo de la clase del objeto al que corresponda de la base de datos
            que usa un entitySearch
            </summary>
            <typeparam name="T">Tipo de dato de la propiedad geo de una entidad</typeparam>
            <param name="castGeoToSearch">Convierte el objeto geo de una instancia de una clase al entitySearch.</param>
            <param name="values">Diccionario con la metadata y valor de la propiedad.</param>
            <returns>retorna un array de clase indicada que implementa IBoolProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetNum64Props``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo long encontradas en un objeto
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>   
            <returns>retorna una array de propiedades de tipo  long que implemente INum64Property</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetStrProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo string encontradas en un objeto
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>retorna una array de propiedades de tipo string que implemente IStrProperty</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Entities.Props.GetSugProps``1(System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object})">
            <summary>
            Obtiene las propiedades de tipo string encontradas en un objeto, pero que indiquen que la propiedad es de tipo suggest.
            las propiedades de tipo suggest indican que tendrán mayor indexación.
            base del entitySearch
            </summary>
            <param name="values">Diccionario con la metadata y valor de la propiedad</param>
            <returns>retorna una array de propiedades de tipo string que implemente IStrProperty, de propiedades que consideren suggest en su atributo mdm</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:trifenix.connect.util.Mdm.Reflection.Entities.Props.FillProps``1(trifenix.connect.search_mdl.Implements{``0},System.Collections.Generic.Dictionary{trifenix.connect.mdm_attributes.BaseIndexAttribute,System.Object},System.Type)" -->
        <member name="T:trifenix.connect.util.Mdm.Reflection.Enumerations">
            <summary>
            Operaciones reflection para enumeraciones.
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Enumerations.GetDictionaryFromEnum``1">
            <summary>
            Convierte una enumeración en un dictionary
            </summary>
            <typeparam name="T">enumeración</typeparam>
            <returns>dictionary</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Reflection.Enumerations.Description(System.Enum)">
            <summary>
            Obtiene la descripción desde una enumeración.
            </summary>
            <param name="value">valor de la enumeración</param>
            <returns></returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.ToProcess">
            <summary>
            Operaciones relacionadas con procesos
            Donde el atributo ToProcess es usado para saltar de una entidad a otra 
            cada ruta tiene un identificador y un objetivo
            La información originada es usada en la metadata
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.GetToProcess(System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToProcessAttribute})">
            <summary>
            El método ToPathFirstStep crea un ToProcessClass o un ToValue con el primer registro
            Para crear ToValue o ToProcess necesita una función, donde se le entrega el tipo y el atributo ToProcess
            del primer salto de una ruta.
            </summary>            
            <param name="atr"></param>
            <returns></returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.GetFilterProcess(System.Type[],System.Int32,System.Boolean,trifenix.connect.mdm.ts_model.GlobalFilters)">
            <summary>
            Obtiene los procesos del filtro global
            </summary>            
            <param name="types">tipos, debe ser filtrado porque estén en el modelo de datos</param>
            <param name="index">índice de la documentación</param>
            <param name="isGlobalFilter">Determina si los procesos a obtener corresponden al filtro global</param>
            <param name="gfc">globalFilter si existe, si se usar este método para generar el GlobalFilter, este valor debe ser nulo.</param>
            <returns>Coleccción con las rutas a la entidad de convergencia (barrack)</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.ToProcessFirstStep(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToProcessAttribute}[])">
            <summary>
            Toma de una colección de tuplas, identifica la primera
            forma ToProcessClass, asigna la primera ruta y retorna el resto de rutas comó tuplas con el tipo y el atributo ToProcess para cada entidad del resto de la ruta.
            </summary>
            <param name="types">tipos donde buscar los próximos elementos</param>
            <param name="tup">colección de tuplas con el tipo y el atributo ToProcess de cada entidad (Clase)</param>
            <returns>ToProcess con el resultado de GetToProcess y la primera ruta, la entidad de origen, la entidad final, la próxima entidad y las tuplas que representan los tipos que restan por identificar.</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.GetToProcess(System.Type[],System.ValueTuple{System.Type,trifenix.connect.mdm_attributes.ToProcessAttribute}[])">
            <summary>
            toma una tupla con el tipo y los valores del atributo toValue
            para retornar un ToProcess de metadata
            </summary>
            <param name="types"></param>
            <param name="tup">tuple con el tipo y el atributo</param>
            <returns>desde el atributo a la metadata</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.ToProcessTypes(System.Type[],System.Int32,System.Boolean,trifenix.connect.mdm.ts_model.GlobalFilters)">
            <summary>
            Retorna una colección con el tipo y el atributo ToProcessAttribute  encontrado
            </summary>
            <param name="types">colección de tipos a analizar</param>
            <param name="index">índice en la documentación de filtros</param>
            <param name="globalFilter"></param>
            <param name="gfc">colección de globalFilters</param>
            <returns>colección con tuplas del tipo encontrado y el objeto ToGlobalFilterValueAttribute</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.ToProcess.GetProcessAttr(System.Type,System.Int32)">
            <summary>
            Obtiene el atributo de ToValue para un tipo
            </summary>
            <param name="type">tipo a determinar si es ToValue</param>
            <param name="index">Determina el índice</param>
            <returns>ToValue si el tipo lo implementa</returns>
        </member>
        <member name="T:trifenix.connect.util.Mdm.Validation">
            <summary>
            Validación de módelods IMd
            </summary>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Validation.CompareModel(System.Object,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}})">
            <summary>
            Compara un input model con un modelo, para validar si los datos que están en el input coinciden con el del modelo.
            </summary>
            <param name="input">objeto input de ingreso</param>
            <param name="model">modelo a validar</param>
            <param name="bind">Colección de funciones, que tomar un input y devuelven una colección de posibles valores que puedan coincidir, es un prefiltro. el método los seleccionará y verá si alguno tiene los mismos valores, si la función no devuelve al menos un modelo correspondiente al input fallará</param>
            <returns>true, si los campos coinciden</returns>
        </member>
        <member name="M:trifenix.connect.util.Mdm.Validation.CompareValueContainer``1(trifenix.connect.util.Mdm.ValueContainer{``0},trifenix.connect.util.Mdm.ValueContainer{``0})">
            <summary>
            Compara dos contenedores de valores.
            </summary>
            <typeparam name="T">Las colecciones serán del tipo que se indique</typeparam>
            <param name="input">colección de propiedades y valores de un objeto input</param>
            <param name="model">colección de propiedades y valores de un objeto model</param>
            <returns>true, si los valores coinciden</returns>
        </member>
        <member name="T:trifenix.connect.util.Namespace">
            <summary>
            Operaciones estáticas, donde se encuentran todas las operaciones base de trifenix connect
            </summary>
        </member>
    </members>
</doc>
